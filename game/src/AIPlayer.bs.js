// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Connect4$Game = require("./Connect4.bs.js");
var CS17SetupGame$Game = require("./CS17SetupGame.bs.js");

function AIPlayer(MyGame) {
  var valueGrab = function (tuple) {
    return tuple[1];
  };
  var sortVal = function (move1, move2) {
    var match = valueGrab(move1);
    var match$1 = valueGrab(move2);
    if (match > match$1) {
      return 1;
    } else if (match < match$1) {
      return -1;
    } else {
      return 0;
    }
  };
  var minimaxHelper = function (alot, p) {
    if (p) {
      if (alot) {
        var hd = alot[0];
        if (alot[1]) {
          return List.hd(List.sort(sortVal, alot));
        } else {
          return /* tuple */[
                  hd[0],
                  hd[1]
                ];
        }
      } else {
        return Pervasives.failwith("There are no possible moves");
      }
    } else if (alot) {
      var hd$1 = alot[0];
      if (alot[1]) {
        return List.hd(List.rev(List.sort(sortVal, alot)));
      } else {
        return /* tuple */[
                hd$1[0],
                hd$1[1]
              ];
      }
    } else {
      return Pervasives.failwith("There are no possible moves");
    }
  };
  var nextMove = function (s) {
    var minimax = function (s, i) {
      var match = Curry._1(MyGame[/* gameStatus */5], s);
      if (typeof match === "number") {
        return /* tuple */[
                Curry._1(MyGame[/* moveOfString */7], "0"),
                0.0
              ];
      } else if (match.tag) {
        if (match[0]) {
          if (i !== 0) {
            return minimaxHelper(List.map((function (move) {
                              return /* tuple */[
                                      move,
                                      valueGrab(minimax(Curry._2(MyGame[/* nextState */6], s, move), CS17SetupGame$Game.$neg(i, 1)))
                                    ];
                            }), Curry._1(MyGame[/* legalMoves */4], s)), /* P2 */1);
          } else {
            return /* tuple */[
                    Curry._1(MyGame[/* moveOfString */7], "0"),
                    Curry._1(MyGame[/* estimateValue */8], s)
                  ];
          }
        } else if (i !== 0) {
          return minimaxHelper(List.map((function (move) {
                            return /* tuple */[
                                    move,
                                    valueGrab(minimax(Curry._2(MyGame[/* nextState */6], s, move), CS17SetupGame$Game.$neg(i, 1)))
                                  ];
                          }), Curry._1(MyGame[/* legalMoves */4], s)), /* P1 */0);
        } else {
          return /* tuple */[
                  Curry._1(MyGame[/* moveOfString */7], "0"),
                  Curry._1(MyGame[/* estimateValue */8], s)
                ];
        }
      } else if (match[0]) {
        return /* tuple */[
                Curry._1(MyGame[/* moveOfString */7], "0"),
                -1000000.0
              ];
      } else {
        return /* tuple */[
                Curry._1(MyGame[/* moveOfString */7], "0"),
                1000000.0
              ];
      }
    };
    return minimax(s, 5)[0];
  };
  return /* module */[
          /* PlayerGame */MyGame,
          /* lookAhead */5,
          /* valueGrab */valueGrab,
          /* sortVal */sortVal,
          /* minimaxHelper */minimaxHelper,
          /* nextMove */nextMove
        ];
}

var MyGame_000 = Connect4$Game.Connect4[2];

var MyGame_001 = Connect4$Game.Connect4[6];

var MyGame_002 = Connect4$Game.Connect4[7];

var MyGame_003 = Connect4$Game.Connect4[11];

var MyGame_004 = Connect4$Game.Connect4[12];

var MyGame_005 = Connect4$Game.Connect4[13];

var MyGame_006 = Connect4$Game.Connect4[18];

var MyGame_007 = Connect4$Game.Connect4[19];

var MyGame_008 = Connect4$Game.Connect4[20];

var MyGame = [
  MyGame_000,
  MyGame_001,
  MyGame_002,
  MyGame_003,
  MyGame_004,
  MyGame_005,
  MyGame_006,
  MyGame_007,
  MyGame_008
];

function valueGrab(tuple) {
  return tuple[1];
}

function sortVal(move1, move2) {
  var match = valueGrab(move1);
  var match$1 = valueGrab(move2);
  if (match > match$1) {
    return 1;
  } else if (match < match$1) {
    return -1;
  } else {
    return 0;
  }
}

function minimaxHelper(alot, p) {
  if (p) {
    if (alot) {
      var hd = alot[0];
      if (alot[1]) {
        return List.hd(List.sort(sortVal, alot));
      } else {
        return /* tuple */[
                hd[0],
                hd[1]
              ];
      }
    } else {
      return Pervasives.failwith("There are no possible moves");
    }
  } else if (alot) {
    var hd$1 = alot[0];
    if (alot[1]) {
      return List.hd(List.rev(List.sort(sortVal, alot)));
    } else {
      return /* tuple */[
              hd$1[0],
              hd$1[1]
            ];
    }
  } else {
    return Pervasives.failwith("There are no possible moves");
  }
}

function nextMove(s) {
  var minimax = function (s, i) {
    var match = Curry._1(MyGame_005, s);
    if (typeof match === "number") {
      return /* tuple */[
              Curry._1(MyGame_007, "0"),
              0.0
            ];
    } else if (match.tag) {
      if (match[0]) {
        if (i !== 0) {
          return minimaxHelper(List.map((function (move) {
                            return /* tuple */[
                                    move,
                                    valueGrab(minimax(Curry._2(MyGame_006, s, move), CS17SetupGame$Game.$neg(i, 1)))
                                  ];
                          }), Curry._1(MyGame_004, s)), /* P2 */1);
        } else {
          return /* tuple */[
                  Curry._1(MyGame_007, "0"),
                  Curry._1(MyGame_008, s)
                ];
        }
      } else if (i !== 0) {
        return minimaxHelper(List.map((function (move) {
                          return /* tuple */[
                                  move,
                                  valueGrab(minimax(Curry._2(MyGame_006, s, move), CS17SetupGame$Game.$neg(i, 1)))
                                ];
                        }), Curry._1(MyGame_004, s)), /* P1 */0);
      } else {
        return /* tuple */[
                Curry._1(MyGame_007, "0"),
                Curry._1(MyGame_008, s)
              ];
      }
    } else if (match[0]) {
      return /* tuple */[
              Curry._1(MyGame_007, "0"),
              -1000000.0
            ];
    } else {
      return /* tuple */[
              Curry._1(MyGame_007, "0"),
              1000000.0
            ];
    }
  };
  return minimax(s, 5)[0];
}

var TestAIPlayer = /* module */[
  /* PlayerGame */MyGame,
  /* lookAhead */5,
  /* valueGrab */valueGrab,
  /* sortVal */sortVal,
  /* minimaxHelper */minimaxHelper,
  /* nextMove */nextMove
];

CS17SetupGame$Game.checkExpect(sortVal(/* tuple */[
          /* Col */[2],
          100.0
        ], /* tuple */[
          /* Col */[4],
          -645.0
        ]), 1, "sortVal1");

CS17SetupGame$Game.checkExpect(sortVal(/* tuple */[
          /* Col */[1],
          0.0
        ], /* tuple */[
          /* Col */[3],
          0.0
        ]), 0, "sortVal2");

CS17SetupGame$Game.checkExpect(minimaxHelper(/* :: */[
          /* tuple */[
            /* Col */[2],
            100.0
          ],
          /* :: */[
            /* tuple */[
              /* Col */[4],
              -645.0
            ],
            /* :: */[
              /* tuple */[
                /* Col */[3],
                1000.0
              ],
              /* :: */[
                /* tuple */[
                  /* Col */[1],
                  -20.0
                ],
                /* [] */0
              ]
            ]
          ]
        ], /* P1 */0), /* tuple */[
      /* Col */[3],
      1000.0
    ], "P1 minimaxHelp");

CS17SetupGame$Game.checkExpect(minimaxHelper(/* :: */[
          /* tuple */[
            /* Col */[2],
            100.0
          ],
          /* :: */[
            /* tuple */[
              /* Col */[4],
              -645.0
            ],
            /* :: */[
              /* tuple */[
                /* Col */[3],
                1000.0
              ],
              /* :: */[
                /* tuple */[
                  /* Col */[1],
                  -20.0
                ],
                /* [] */0
              ]
            ]
          ]
        ], /* P2 */1), /* tuple */[
      /* Col */[4],
      -645.0
    ], "P2 minimaxHelp");

var TestGame = 0;

exports.AIPlayer = AIPlayer;
exports.TestGame = TestGame;
exports.TestAIPlayer = TestAIPlayer;
/*  Not a pure module */
