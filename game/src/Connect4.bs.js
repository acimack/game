// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Caml_primitive = require("bs-platform/lib/js/caml_primitive.js");
var CS17SetupGame$Game = require("./CS17SetupGame.bs.js");

function stringOfPlayer(p) {
  if (p) {
    return "Player 2";
  } else {
    return "Player 1";
  }
}

function stringHelper(_l) {
  while(true) {
    var l = _l;
    var k = CS17SetupGame$Game.$neg(5, List.length(l));
    if (k !== 0) {
      if (k > 0) {
        _l = /* :: */[
          "O",
          l
        ];
        continue ;
      } else {
        return Pervasives.failwith("stringHelper domain error");
      }
    } else {
      return l;
    }
  };
}

function fillBoard(b) {
  return List.map(stringHelper, b);
}

function transpose(mat) {
  if (mat) {
    var match = mat[0];
    if (match) {
      if (match[1]) {
        return /* :: */[
                List.map(List.hd, mat),
                transpose(List.map(List.tl, mat))
              ];
      } else {
        return /* :: */[
                List.flatten(mat),
                /* [] */0
              ];
      }
    } else {
      return Pervasives.failwith("A matrix cannot be 0-dimensional.");
    }
  } else {
    return /* [] */0;
  }
}

function stringOfState(s) {
  var stringOfStateHelper = function (b) {
    if (b) {
      return List.fold_right((function (x, y) {
                    return x + (" " + y);
                  }), b[0], "") + ("\n" + stringOfStateHelper(b[1]));
    } else {
      return "";
    }
  };
  return stringOfStateHelper(transpose(List.map(stringHelper, s[0])));
}

function stringOfMove(m) {
  return "Column " + String(m[0]);
}

function diagHelper(mat, cols) {
  var take = function (alod, n) {
    if (n !== 0) {
      if (alod) {
        return /* :: */[
                alod[0],
                take(alod[1], CS17SetupGame$Game.$neg(n, 1))
              ];
      } else {
        return Pervasives.failwith("Can't take items from an empty list");
      }
    } else {
      return /* [] */0;
    }
  };
  var drop = function (_alod, _n) {
    while(true) {
      var n = _n;
      var alod = _alod;
      if (n !== 0) {
        if (alod) {
          _n = CS17SetupGame$Game.$neg(n, 1);
          _alod = alod[1];
          continue ;
        } else {
          return Pervasives.failwith("Can't drop items from an empty list");
        }
      } else {
        return alod;
      }
    };
  };
  if (mat) {
    var row = mat[0];
    if (mat[1]) {
      if (row) {
        var rr = diagHelper(mat[1], cols);
        var front = take(rr, CS17SetupGame$Game.$neg(cols, 1));
        var back = drop(rr, CS17SetupGame$Game.$neg(cols, 1));
        return Pervasives.$at(/* :: */[
                    /* :: */[
                      row[0],
                      /* [] */0
                    ],
                    List.map2((function (x, y) {
                            return /* :: */[
                                    x,
                                    y
                                  ];
                          }), row[1], front)
                  ], back);
      } else {
        return Pervasives.failwith("Domain Error");
      }
    } else {
      return List.map((function (x) {
                    return /* :: */[
                            x,
                            /* [] */0
                          ];
                  }), row);
    }
  } else {
    return Pervasives.failwith("Domain Error");
  }
}

function diags(param) {
  if (param) {
    var hd = param[0];
    return diagHelper(/* :: */[
                hd,
                param[1]
              ], List.length(hd));
  } else {
    return /* [] */0;
  }
}

function initialStateHelper(c) {
  if (c !== 0) {
    return /* :: */[
            /* [] */0,
            initialStateHelper(CS17SetupGame$Game.$neg(c, 1))
          ];
  } else {
    return /* [] */0;
  }
}

var initialState_000 = initialStateHelper(7);

var initialState_001 = /* Ongoing */Block.__(1, [/* P1 */0]);

var initialState = /* State */[
  initialState_000,
  initialState_001
];

function legalMoves(s) {
  var legalMovesHelp = function (_board, _i) {
    while(true) {
      var i = _i;
      var board = _board;
      if (board) {
        var tl = board[1];
        if (List.length(board[0]) < 5) {
          return /* :: */[
                  /* Col */[CS17SetupGame$Game.$plus(i, 1)],
                  legalMovesHelp(tl, CS17SetupGame$Game.$plus(i, 1))
                ];
        } else {
          _i = CS17SetupGame$Game.$plus(i, 1);
          _board = tl;
          continue ;
        }
      } else {
        return /* [] */0;
      }
    };
  };
  var tmp = s[1];
  if (typeof tmp === "number" || !tmp.tag) {
    return /* [] */0;
  } else {
    return legalMovesHelp(s[0], 0);
  }
}

function gameStatus(s) {
  return s[1];
}

function nextStateHelper(board, i, c, p) {
  if (c === 7) {
    return /* [] */0;
  } else if (c < 7) {
    if (p) {
      if (CS17SetupGame$Game.$neg(i, 1) === c) {
        return /* :: */[
                /* :: */[
                  "B",
                  List.nth(board, CS17SetupGame$Game.$neg(i, 1))
                ],
                nextStateHelper(board, i, CS17SetupGame$Game.$plus(c, 1), /* P2 */1)
              ];
      } else {
        return /* :: */[
                List.nth(board, c),
                nextStateHelper(board, i, CS17SetupGame$Game.$plus(c, 1), /* P2 */1)
              ];
      }
    } else if (CS17SetupGame$Game.$neg(i, 1) === c) {
      return /* :: */[
              /* :: */[
                "R",
                List.nth(board, CS17SetupGame$Game.$neg(i, 1))
              ],
              nextStateHelper(board, i, CS17SetupGame$Game.$plus(c, 1), /* P1 */0)
            ];
    } else {
      return /* :: */[
              List.nth(board, c),
              nextStateHelper(board, i, CS17SetupGame$Game.$plus(c, 1), /* P1 */0)
            ];
    }
  } else {
    return Pervasives.failwith("nextStateHelper takes in a list of list 'a, int, int, and a player");
  }
}

function countSequence(_lst, _c) {
  while(true) {
    var c = _c;
    var lst = _lst;
    if (lst) {
      var tl = lst[1];
      var _a = lst[0];
      if (tl) {
        if (tl[1]) {
          if (_a === List.hd(tl) && _a !== "O") {
            _c = CS17SetupGame$Game.$plus(c, 1);
            _lst = tl;
            continue ;
          } else if (_a === "O") {
            _lst = tl;
            continue ;
          } else {
            return Caml_primitive.caml_int_max(c, countSequence(tl, 1));
          }
        } else {
          var b = tl[0];
          if (_a === b && b !== "O") {
            return CS17SetupGame$Game.$plus(c, 1);
          } else {
            return c;
          }
        }
      } else {
        return c;
      }
    } else {
      return 0;
    }
  };
}

var total = CS17SetupGame$Game.$star(5, 7);

function drawHelper(b) {
  return List.fold_right(CS17SetupGame$Game.$plus, List.map(List.length, b), 0);
}

function nextState(s, m) {
  var match = s[1];
  var b = s[0];
  if (typeof match === "number") {
    return /* State */[
            b,
            /* Draw */0
          ];
  } else if (match.tag) {
    var i = m[0];
    var newBoard1 = nextStateHelper(b, i, 0, /* P1 */0);
    var newBoard2 = nextStateHelper(b, i, 0, /* P2 */1);
    var b$1 = nextStateHelper(b, i, 0, /* P1 */0);
    var newBoardFilled1 = List.map(stringHelper, b$1);
    var b$2 = nextStateHelper(b, i, 0, /* P2 */1);
    var newBoardFilled2 = List.map(stringHelper, b$2);
    var index = CS17SetupGame$Game.$neg(i, 1);
    var pieceLocation1 = CS17SetupGame$Game.$neg(5, List.length(List.nth(nextStateHelper(b, i, 0, /* P1 */0), index)));
    var pieceLocation2 = CS17SetupGame$Game.$neg(5, List.length(List.nth(nextStateHelper(b, i, 0, /* P2 */1), index)));
    if (match[0]) {
      if (countSequence(List.nth(newBoardFilled2, index), 1) === 4 || countSequence(List.nth(transpose(newBoardFilled2), pieceLocation2), 1) === 4 || countSequence(List.nth(diags(transpose(newBoardFilled2)), CS17SetupGame$Game.$plus(pieceLocation2, index)), 1) === 4 || List.mem(4, List.map((function (x) {
                    return countSequence(x, 1);
                  }), diags(List.map(List.rev, transpose(newBoardFilled2)))))) {
        return /* State */[
                newBoard2,
                /* Win */Block.__(0, [/* P2 */1])
              ];
      } else if (drawHelper(newBoard2) === total) {
        return /* State */[
                newBoard2,
                /* Draw */0
              ];
      } else {
        return /* State */[
                newBoard2,
                /* Ongoing */Block.__(1, [/* P1 */0])
              ];
      }
    } else if (countSequence(List.nth(newBoardFilled1, index), 1) === 4 || countSequence(List.nth(transpose(newBoardFilled1), pieceLocation1), 1) === 4 || countSequence(List.nth(diags(transpose(newBoardFilled1)), CS17SetupGame$Game.$plus(pieceLocation1, index)), 1) === 4 || List.mem(4, List.map((function (x) {
                  return countSequence(x, 1);
                }), diags(List.map(List.rev, transpose(newBoardFilled1)))))) {
      return /* State */[
              newBoard1,
              /* Win */Block.__(0, [/* P1 */0])
            ];
    } else if (drawHelper(newBoard1) === total) {
      return /* State */[
              newBoard1,
              /* Draw */0
            ];
    } else {
      return /* State */[
              newBoard1,
              /* Ongoing */Block.__(1, [/* P2 */1])
            ];
    }
  } else {
    return /* State */[
            b,
            /* Win */Block.__(0, [match[0]])
          ];
  }
}

function moveOfString(str) {
  return /* Col */[Caml_format.caml_int_of_string(str)];
}

function estimateValue(s) {
  var match = s[1];
  var b = s[0];
  if (typeof match === "number") {
    return 0.0;
  } else if (match.tag) {
    return List.fold_right((function (x, y) {
                  return x + y;
                }), List.map((function (x) {
                      var _lst = x;
                      var _v = 0.0;
                      while(true) {
                        var v = _v;
                        var lst = _lst;
                        if (lst) {
                          switch (lst[0]) {
                            case "B" : 
                                var match = lst[1];
                                var exit = 0;
                                if (match) {
                                  switch (match[0]) {
                                    case "B" : 
                                        var match$1 = match[1];
                                        if (match$1) {
                                          switch (match$1[0]) {
                                            case "B" : 
                                                var match$2 = match$1[1];
                                                if (match$2 && match$2[0] === "O") {
                                                  _v = v + -700.0;
                                                  _lst = List.tl(lst);
                                                  continue ;
                                                } else {
                                                  exit = 1;
                                                }
                                                break;
                                            case "O" : 
                                                var match$3 = match$1[1];
                                                if (match$3) {
                                                  if (match$3[0] === "O") {
                                                    _v = v + -400.0;
                                                    _lst = List.tl(lst);
                                                    continue ;
                                                  } else {
                                                    _v = v + -50.0;
                                                    _lst = List.tl(lst);
                                                    continue ;
                                                  }
                                                } else {
                                                  _v = v + -50.0;
                                                  _lst = List.tl(lst);
                                                  continue ;
                                                }
                                            default:
                                              exit = 1;
                                          }
                                        } else {
                                          exit = 1;
                                        }
                                        break;
                                    case "O" : 
                                        var match$4 = match[1];
                                        if (match$4) {
                                          switch (match$4[0]) {
                                            case "B" : 
                                                var match$5 = match$4[1];
                                                if (match$5) {
                                                  if (match$5[0] === "O") {
                                                    _v = v + -400.0;
                                                    _lst = List.tl(lst);
                                                    continue ;
                                                  } else {
                                                    _v = v + -50.0;
                                                    _lst = List.tl(lst);
                                                    continue ;
                                                  }
                                                } else {
                                                  _v = v + -50.0;
                                                  _lst = List.tl(lst);
                                                  continue ;
                                                }
                                            case "O" : 
                                                var match$6 = match$4[1];
                                                if (match$6) {
                                                  switch (match$6[0]) {
                                                    case "B" : 
                                                        _v = v + -400.0;
                                                        _lst = List.tl(lst);
                                                        continue ;
                                                    case "O" : 
                                                        _v = v + -300.0;
                                                        _lst = List.tl(lst);
                                                        continue ;
                                                    default:
                                                      _v = v + -50.0;
                                                      _lst = List.tl(lst);
                                                      continue ;
                                                  }
                                                } else {
                                                  _v = v + -50.0;
                                                  _lst = List.tl(lst);
                                                  continue ;
                                                }
                                            default:
                                              _v = v + -20.0;
                                              _lst = List.tl(lst);
                                              continue ;
                                          }
                                        } else {
                                          _v = v + -20.0;
                                          _lst = List.tl(lst);
                                          continue ;
                                        }
                                    default:
                                      exit = 1;
                                  }
                                } else {
                                  exit = 1;
                                }
                                if (exit === 1) {
                                  _v = v - 10.0;
                                  _lst = List.tl(lst);
                                  continue ;
                                }
                                break;
                            case "O" : 
                                var match$7 = lst[1];
                                if (match$7) {
                                  switch (match$7[0]) {
                                    case "B" : 
                                        var match$8 = match$7[1];
                                        if (match$8) {
                                          switch (match$8[0]) {
                                            case "B" : 
                                                var match$9 = match$8[1];
                                                if (match$9) {
                                                  switch (match$9[0]) {
                                                    case "B" : 
                                                        var match$10 = match$9[1];
                                                        if (match$10) {
                                                          if (match$10[0] === "O") {
                                                            _v = v + -900.0;
                                                            _lst = List.tl(lst);
                                                            continue ;
                                                          } else {
                                                            _v = v + -700.0;
                                                            _lst = List.tl(lst);
                                                            continue ;
                                                          }
                                                        } else {
                                                          _v = v + -700.0;
                                                          _lst = List.tl(lst);
                                                          continue ;
                                                        }
                                                    case "O" : 
                                                        _v = v + -800.0;
                                                        _lst = List.tl(lst);
                                                        continue ;
                                                    default:
                                                      _v = v + -50.0;
                                                      _lst = List.tl(lst);
                                                      continue ;
                                                  }
                                                } else {
                                                  _v = v + -50.0;
                                                  _lst = List.tl(lst);
                                                  continue ;
                                                }
                                            case "O" : 
                                                var match$11 = match$8[1];
                                                if (match$11) {
                                                  switch (match$11[0]) {
                                                    case "B" : 
                                                        _v = v + -400.0;
                                                        _lst = List.tl(lst);
                                                        continue ;
                                                    case "O" : 
                                                        _v = v + -300.0;
                                                        _lst = List.tl(lst);
                                                        continue ;
                                                    default:
                                                      _v = v + -50.0;
                                                      _lst = List.tl(lst);
                                                      continue ;
                                                  }
                                                } else {
                                                  _v = v + -50.0;
                                                  _lst = List.tl(lst);
                                                  continue ;
                                                }
                                            default:
                                              _v = v + -20.0;
                                              _lst = List.tl(lst);
                                              continue ;
                                          }
                                        } else {
                                          _v = v + -20.0;
                                          _lst = List.tl(lst);
                                          continue ;
                                        }
                                    case "O" : 
                                        var match$12 = match$7[1];
                                        if (match$12) {
                                          switch (match$12[0]) {
                                            case "B" : 
                                                var match$13 = match$12[1];
                                                if (match$13) {
                                                  if (match$13[0] === "O") {
                                                    _v = v + -300.0;
                                                    _lst = List.tl(lst);
                                                    continue ;
                                                  } else {
                                                    _v = v + 50.0;
                                                    _lst = List.tl(lst);
                                                    continue ;
                                                  }
                                                } else {
                                                  _v = v + 50.0;
                                                  _lst = List.tl(lst);
                                                  continue ;
                                                }
                                            case "O" : 
                                                var match$14 = match$12[1];
                                                if (match$14) {
                                                  switch (match$14[0]) {
                                                    case "B" : 
                                                        _v = v + -300.0;
                                                        _lst = List.tl(lst);
                                                        continue ;
                                                    case "R" : 
                                                        _v = v + 300.0;
                                                        _lst = List.tl(lst);
                                                        continue ;
                                                    default:
                                                      return v;
                                                  }
                                                } else {
                                                  return v;
                                                }
                                            case "R" : 
                                                var match$15 = match$12[1];
                                                if (match$15) {
                                                  if (match$15[0] === "O") {
                                                    _v = v + 300.0;
                                                    _lst = List.tl(lst);
                                                    continue ;
                                                  } else {
                                                    _v = v + 50.0;
                                                    _lst = List.tl(lst);
                                                    continue ;
                                                  }
                                                } else {
                                                  _v = v + 50.0;
                                                  _lst = List.tl(lst);
                                                  continue ;
                                                }
                                            default:
                                              return v;
                                          }
                                        } else {
                                          return v;
                                        }
                                    case "R" : 
                                        var match$16 = match$7[1];
                                        if (match$16) {
                                          switch (match$16[0]) {
                                            case "O" : 
                                                var match$17 = match$16[1];
                                                if (match$17) {
                                                  switch (match$17[0]) {
                                                    case "O" : 
                                                        _v = v + 300.0;
                                                        _lst = List.tl(lst);
                                                        continue ;
                                                    case "R" : 
                                                        _v = v + 400.0;
                                                        _lst = List.tl(lst);
                                                        continue ;
                                                    default:
                                                      _v = v + 50.0;
                                                      _lst = List.tl(lst);
                                                      continue ;
                                                  }
                                                } else {
                                                  _v = v + 50.0;
                                                  _lst = List.tl(lst);
                                                  continue ;
                                                }
                                            case "R" : 
                                                var match$18 = match$16[1];
                                                if (match$18) {
                                                  switch (match$18[0]) {
                                                    case "O" : 
                                                        _v = v + 800.0;
                                                        _lst = List.tl(lst);
                                                        continue ;
                                                    case "R" : 
                                                        var match$19 = match$18[1];
                                                        if (match$19) {
                                                          if (match$19[0] === "O") {
                                                            _v = v + 900.0;
                                                            _lst = List.tl(lst);
                                                            continue ;
                                                          } else {
                                                            _v = v + 700.0;
                                                            _lst = List.tl(lst);
                                                            continue ;
                                                          }
                                                        } else {
                                                          _v = v + 700.0;
                                                          _lst = List.tl(lst);
                                                          continue ;
                                                        }
                                                    default:
                                                      _v = v + 50.0;
                                                      _lst = List.tl(lst);
                                                      continue ;
                                                  }
                                                } else {
                                                  _v = v + 50.0;
                                                  _lst = List.tl(lst);
                                                  continue ;
                                                }
                                            default:
                                              _v = v + 20.0;
                                              _lst = List.tl(lst);
                                              continue ;
                                          }
                                        } else {
                                          _v = v + 20.0;
                                          _lst = List.tl(lst);
                                          continue ;
                                        }
                                    default:
                                      return v;
                                  }
                                } else {
                                  return v;
                                }
                            case "R" : 
                                var match$20 = lst[1];
                                var exit$1 = 0;
                                if (match$20) {
                                  switch (match$20[0]) {
                                    case "O" : 
                                        var match$21 = match$20[1];
                                        if (match$21) {
                                          switch (match$21[0]) {
                                            case "O" : 
                                                var match$22 = match$21[1];
                                                if (match$22) {
                                                  switch (match$22[0]) {
                                                    case "O" : 
                                                        _v = v + 300.0;
                                                        _lst = List.tl(lst);
                                                        continue ;
                                                    case "R" : 
                                                        _v = v + 400.0;
                                                        _lst = List.tl(lst);
                                                        continue ;
                                                    default:
                                                      _v = v + 50.0;
                                                      _lst = List.tl(lst);
                                                      continue ;
                                                  }
                                                } else {
                                                  _v = v + 50.0;
                                                  _lst = List.tl(lst);
                                                  continue ;
                                                }
                                            case "R" : 
                                                var match$23 = match$21[1];
                                                if (match$23) {
                                                  if (match$23[0] === "O") {
                                                    _v = v + 400.0;
                                                    _lst = List.tl(lst);
                                                    continue ;
                                                  } else {
                                                    _v = v + 50.0;
                                                    _lst = List.tl(lst);
                                                    continue ;
                                                  }
                                                } else {
                                                  _v = v + 50.0;
                                                  _lst = List.tl(lst);
                                                  continue ;
                                                }
                                            default:
                                              _v = v + 20.0;
                                              _lst = List.tl(lst);
                                              continue ;
                                          }
                                        } else {
                                          _v = v + 20.0;
                                          _lst = List.tl(lst);
                                          continue ;
                                        }
                                    case "R" : 
                                        var match$24 = match$20[1];
                                        if (match$24) {
                                          switch (match$24[0]) {
                                            case "O" : 
                                                var match$25 = match$24[1];
                                                if (match$25) {
                                                  if (match$25[0] === "O") {
                                                    _v = v + 400.0;
                                                    _lst = List.tl(lst);
                                                    continue ;
                                                  } else {
                                                    _v = v + 50.0;
                                                    _lst = List.tl(lst);
                                                    continue ;
                                                  }
                                                } else {
                                                  _v = v + 50.0;
                                                  _lst = List.tl(lst);
                                                  continue ;
                                                }
                                            case "R" : 
                                                var match$26 = match$24[1];
                                                if (match$26 && match$26[0] === "O") {
                                                  _v = v + 700.0;
                                                  _lst = List.tl(lst);
                                                  continue ;
                                                } else {
                                                  exit$1 = 1;
                                                }
                                                break;
                                            default:
                                              exit$1 = 1;
                                          }
                                        } else {
                                          exit$1 = 1;
                                        }
                                        break;
                                    default:
                                      exit$1 = 1;
                                  }
                                } else {
                                  exit$1 = 1;
                                }
                                if (exit$1 === 1) {
                                  _v = v + 10.0;
                                  _lst = List.tl(lst);
                                  continue ;
                                }
                                break;
                            default:
                              return v;
                          }
                        } else {
                          return v;
                        }
                      };
                    }), Pervasives.$at(b, Pervasives.$at(transpose(List.map(stringHelper, b)), Pervasives.$at(diags(transpose(List.map(stringHelper, b))), diags(List.map(List.rev, transpose(List.map(stringHelper, b)))))))), 0.0);
  } else if (match[0]) {
    return -10000.0;
  } else {
    return 10000.0;
  }
}

var Connect4 = /* module */[
  /* initialRows */5,
  /* initialCols */7,
  /* stringOfPlayer */stringOfPlayer,
  /* stringHelper */stringHelper,
  /* fillBoard */fillBoard,
  /* transpose */transpose,
  /* stringOfState */stringOfState,
  /* stringOfMove */stringOfMove,
  /* diagHelper */diagHelper,
  /* diags */diags,
  /* initialStateHelper */initialStateHelper,
  /* initialState */initialState,
  /* legalMoves */legalMoves,
  /* gameStatus */gameStatus,
  /* nextStateHelper */nextStateHelper,
  /* countSequence */countSequence,
  /* total */total,
  /* drawHelper */drawHelper,
  /* nextState */nextState,
  /* moveOfString */moveOfString,
  /* estimateValue */estimateValue
];

CS17SetupGame$Game.checkExpect(stringHelper(/* :: */[
          "R",
          /* :: */[
            "B",
            /* [] */0
          ]
        ]), /* :: */[
      "O",
      /* :: */[
        "O",
        /* :: */[
          "O",
          /* :: */[
            "R",
            /* :: */[
              "B",
              /* [] */0
            ]
          ]
        ]
      ]
    ], "filledcol1");

CS17SetupGame$Game.checkExpect(stringHelper(/* [] */0), /* :: */[
      "O",
      /* :: */[
        "O",
        /* :: */[
          "O",
          /* :: */[
            "O",
            /* :: */[
              "O",
              /* [] */0
            ]
          ]
        ]
      ]
    ], "filledcol2");

CS17SetupGame$Game.checkExpect(stringHelper(/* :: */[
          "R",
          /* :: */[
            "B",
            /* :: */[
              "R",
              /* :: */[
                "R",
                /* :: */[
                  "R",
                  /* [] */0
                ]
              ]
            ]
          ]
        ]), /* :: */[
      "R",
      /* :: */[
        "B",
        /* :: */[
          "R",
          /* :: */[
            "R",
            /* :: */[
              "R",
              /* [] */0
            ]
          ]
        ]
      ]
    ], "filledcol3");

CS17SetupGame$Game.checkExpect(List.map(stringHelper, /* :: */[
          /* [] */0,
          /* :: */[
            /* [] */0,
            /* :: */[
              /* :: */[
                "R",
                /* :: */[
                  "R",
                  /* :: */[
                    "B",
                    /* [] */0
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  "R",
                  /* :: */[
                    "B",
                    /* :: */[
                      "B",
                      /* [] */0
                    ]
                  ]
                ],
                /* :: */[
                  /* :: */[
                    "R",
                    /* :: */[
                      "R",
                      /* [] */0
                    ]
                  ],
                  /* :: */[
                    /* [] */0,
                    /* :: */[
                      /* [] */0,
                      /* [] */0
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]), /* :: */[
      /* :: */[
        "O",
        /* :: */[
          "O",
          /* :: */[
            "O",
            /* :: */[
              "O",
              /* :: */[
                "O",
                /* [] */0
              ]
            ]
          ]
        ]
      ],
      /* :: */[
        /* :: */[
          "O",
          /* :: */[
            "O",
            /* :: */[
              "O",
              /* :: */[
                "O",
                /* :: */[
                  "O",
                  /* [] */0
                ]
              ]
            ]
          ]
        ],
        /* :: */[
          /* :: */[
            "O",
            /* :: */[
              "O",
              /* :: */[
                "R",
                /* :: */[
                  "R",
                  /* :: */[
                    "B",
                    /* [] */0
                  ]
                ]
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              "O",
              /* :: */[
                "O",
                /* :: */[
                  "R",
                  /* :: */[
                    "B",
                    /* :: */[
                      "B",
                      /* [] */0
                    ]
                  ]
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                "O",
                /* :: */[
                  "O",
                  /* :: */[
                    "O",
                    /* :: */[
                      "R",
                      /* :: */[
                        "R",
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  "O",
                  /* :: */[
                    "O",
                    /* :: */[
                      "O",
                      /* :: */[
                        "O",
                        /* :: */[
                          "O",
                          /* [] */0
                        ]
                      ]
                    ]
                  ]
                ],
                /* :: */[
                  /* :: */[
                    "O",
                    /* :: */[
                      "O",
                      /* :: */[
                        "O",
                        /* :: */[
                          "O",
                          /* :: */[
                            "O",
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ],
                  /* [] */0
                ]
              ]
            ]
          ]
        ]
      ]
    ], "filledboard1");

CS17SetupGame$Game.checkExpect(List.map(stringHelper, /* :: */[
          /* [] */0,
          /* :: */[
            /* [] */0,
            /* :: */[
              /* [] */0,
              /* :: */[
                /* [] */0,
                /* :: */[
                  /* [] */0,
                  /* :: */[
                    /* [] */0,
                    /* :: */[
                      /* [] */0,
                      /* [] */0
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]), /* :: */[
      /* :: */[
        "O",
        /* :: */[
          "O",
          /* :: */[
            "O",
            /* :: */[
              "O",
              /* :: */[
                "O",
                /* [] */0
              ]
            ]
          ]
        ]
      ],
      /* :: */[
        /* :: */[
          "O",
          /* :: */[
            "O",
            /* :: */[
              "O",
              /* :: */[
                "O",
                /* :: */[
                  "O",
                  /* [] */0
                ]
              ]
            ]
          ]
        ],
        /* :: */[
          /* :: */[
            "O",
            /* :: */[
              "O",
              /* :: */[
                "O",
                /* :: */[
                  "O",
                  /* :: */[
                    "O",
                    /* [] */0
                  ]
                ]
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              "O",
              /* :: */[
                "O",
                /* :: */[
                  "O",
                  /* :: */[
                    "O",
                    /* :: */[
                      "O",
                      /* [] */0
                    ]
                  ]
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                "O",
                /* :: */[
                  "O",
                  /* :: */[
                    "O",
                    /* :: */[
                      "O",
                      /* :: */[
                        "O",
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  "O",
                  /* :: */[
                    "O",
                    /* :: */[
                      "O",
                      /* :: */[
                        "O",
                        /* :: */[
                          "O",
                          /* [] */0
                        ]
                      ]
                    ]
                  ]
                ],
                /* :: */[
                  /* :: */[
                    "O",
                    /* :: */[
                      "O",
                      /* :: */[
                        "O",
                        /* :: */[
                          "O",
                          /* :: */[
                            "O",
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ],
                  /* [] */0
                ]
              ]
            ]
          ]
        ]
      ]
    ], "filledboard2");

CS17SetupGame$Game.checkExpect(stringOfMove(/* Col */[1]), "Column 1", "stringMove1");

CS17SetupGame$Game.checkExpect(stringOfMove(/* Col */[7]), "Column 7", "stringMove2");

CS17SetupGame$Game.checkExpect(initialStateHelper(4), /* :: */[
      /* [] */0,
      /* :: */[
        /* [] */0,
        /* :: */[
          /* [] */0,
          /* :: */[
            /* [] */0,
            /* [] */0
          ]
        ]
      ]
    ], "initialStateHelp1");

CS17SetupGame$Game.checkExpect(initialStateHelper(2), /* :: */[
      /* [] */0,
      /* :: */[
        /* [] */0,
        /* [] */0
      ]
    ], "initialStateHelp2");

CS17SetupGame$Game.checkExpect(transpose(/* :: */[
          /* :: */[
            "O",
            /* :: */[
              "O",
              /* :: */[
                "O",
                /* :: */[
                  "O",
                  /* :: */[
                    "O",
                    /* [] */0
                  ]
                ]
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              "O",
              /* :: */[
                "O",
                /* :: */[
                  "O",
                  /* :: */[
                    "O",
                    /* :: */[
                      "O",
                      /* [] */0
                    ]
                  ]
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                "O",
                /* :: */[
                  "O",
                  /* :: */[
                    "R",
                    /* :: */[
                      "R",
                      /* :: */[
                        "B",
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  "O",
                  /* :: */[
                    "O",
                    /* :: */[
                      "R",
                      /* :: */[
                        "B",
                        /* :: */[
                          "B",
                          /* [] */0
                        ]
                      ]
                    ]
                  ]
                ],
                /* :: */[
                  /* :: */[
                    "O",
                    /* :: */[
                      "O",
                      /* :: */[
                        "O",
                        /* :: */[
                          "R",
                          /* :: */[
                            "R",
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ],
                  /* :: */[
                    /* :: */[
                      "O",
                      /* :: */[
                        "O",
                        /* :: */[
                          "O",
                          /* :: */[
                            "O",
                            /* :: */[
                              "O",
                              /* [] */0
                            ]
                          ]
                        ]
                      ]
                    ],
                    /* :: */[
                      /* :: */[
                        "O",
                        /* :: */[
                          "O",
                          /* :: */[
                            "O",
                            /* :: */[
                              "O",
                              /* :: */[
                                "O",
                                /* [] */0
                              ]
                            ]
                          ]
                        ]
                      ],
                      /* [] */0
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]), /* :: */[
      /* :: */[
        "O",
        /* :: */[
          "O",
          /* :: */[
            "O",
            /* :: */[
              "O",
              /* :: */[
                "O",
                /* :: */[
                  "O",
                  /* :: */[
                    "O",
                    /* [] */0
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      /* :: */[
        /* :: */[
          "O",
          /* :: */[
            "O",
            /* :: */[
              "O",
              /* :: */[
                "O",
                /* :: */[
                  "O",
                  /* :: */[
                    "O",
                    /* :: */[
                      "O",
                      /* [] */0
                    ]
                  ]
                ]
              ]
            ]
          ]
        ],
        /* :: */[
          /* :: */[
            "O",
            /* :: */[
              "O",
              /* :: */[
                "R",
                /* :: */[
                  "R",
                  /* :: */[
                    "O",
                    /* :: */[
                      "O",
                      /* :: */[
                        "O",
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              "O",
              /* :: */[
                "O",
                /* :: */[
                  "R",
                  /* :: */[
                    "B",
                    /* :: */[
                      "R",
                      /* :: */[
                        "O",
                        /* :: */[
                          "O",
                          /* [] */0
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                "O",
                /* :: */[
                  "O",
                  /* :: */[
                    "B",
                    /* :: */[
                      "B",
                      /* :: */[
                        "R",
                        /* :: */[
                          "O",
                          /* :: */[
                            "O",
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              /* [] */0
            ]
          ]
        ]
      ]
    ], "transpose1");

CS17SetupGame$Game.checkExpect(diagHelper(/* :: */[
          /* :: */[
            "O",
            /* :: */[
              "O",
              /* :: */[
                "O",
                /* :: */[
                  "O",
                  /* :: */[
                    "O",
                    /* :: */[
                      "O",
                      /* :: */[
                        "O",
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              "O",
              /* :: */[
                "O",
                /* :: */[
                  "O",
                  /* :: */[
                    "O",
                    /* :: */[
                      "O",
                      /* :: */[
                        "O",
                        /* :: */[
                          "O",
                          /* [] */0
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                "O",
                /* :: */[
                  "O",
                  /* :: */[
                    "R",
                    /* :: */[
                      "R",
                      /* :: */[
                        "O",
                        /* :: */[
                          "O",
                          /* :: */[
                            "O",
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  "O",
                  /* :: */[
                    "O",
                    /* :: */[
                      "R",
                      /* :: */[
                        "B",
                        /* :: */[
                          "R",
                          /* :: */[
                            "O",
                            /* :: */[
                              "O",
                              /* [] */0
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ],
                /* :: */[
                  /* :: */[
                    "O",
                    /* :: */[
                      "O",
                      /* :: */[
                        "B",
                        /* :: */[
                          "B",
                          /* :: */[
                            "R",
                            /* :: */[
                              "O",
                              /* :: */[
                                "O",
                                /* [] */0
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ],
                  /* [] */0
                ]
              ]
            ]
          ]
        ], 7), /* :: */[
      /* :: */[
        "O",
        /* [] */0
      ],
      /* :: */[
        /* :: */[
          "O",
          /* :: */[
            "O",
            /* [] */0
          ]
        ],
        /* :: */[
          /* :: */[
            "O",
            /* :: */[
              "O",
              /* :: */[
                "O",
                /* [] */0
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              "O",
              /* :: */[
                "O",
                /* :: */[
                  "O",
                  /* :: */[
                    "O",
                    /* [] */0
                  ]
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                "O",
                /* :: */[
                  "O",
                  /* :: */[
                    "R",
                    /* :: */[
                      "O",
                      /* :: */[
                        "O",
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  "O",
                  /* :: */[
                    "O",
                    /* :: */[
                      "R",
                      /* :: */[
                        "R",
                        /* :: */[
                          "O",
                          /* [] */0
                        ]
                      ]
                    ]
                  ]
                ],
                /* :: */[
                  /* :: */[
                    "O",
                    /* :: */[
                      "O",
                      /* :: */[
                        "O",
                        /* :: */[
                          "B",
                          /* :: */[
                            "B",
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ],
                  /* :: */[
                    /* :: */[
                      "O",
                      /* :: */[
                        "O",
                        /* :: */[
                          "R",
                          /* :: */[
                            "B",
                            /* [] */0
                          ]
                        ]
                      ]
                    ],
                    /* :: */[
                      /* :: */[
                        "O",
                        /* :: */[
                          "O",
                          /* :: */[
                            "R",
                            /* [] */0
                          ]
                        ]
                      ],
                      /* :: */[
                        /* :: */[
                          "O",
                          /* :: */[
                            "O",
                            /* [] */0
                          ]
                        ],
                        /* :: */[
                          /* :: */[
                            "O",
                            /* [] */0
                          ],
                          /* [] */0
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ], "diagHelper1");

CS17SetupGame$Game.checkExpect(diags(transpose(List.map(stringHelper, /* :: */[
                  /* [] */0,
                  /* :: */[
                    /* [] */0,
                    /* :: */[
                      /* :: */[
                        "R",
                        /* :: */[
                          "R",
                          /* :: */[
                            "B",
                            /* [] */0
                          ]
                        ]
                      ],
                      /* :: */[
                        /* :: */[
                          "R",
                          /* :: */[
                            "B",
                            /* :: */[
                              "B",
                              /* [] */0
                            ]
                          ]
                        ],
                        /* :: */[
                          /* :: */[
                            "R",
                            /* :: */[
                              "R",
                              /* [] */0
                            ]
                          ],
                          /* :: */[
                            /* [] */0,
                            /* :: */[
                              /* [] */0,
                              /* [] */0
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ]))), /* :: */[
      /* :: */[
        "O",
        /* [] */0
      ],
      /* :: */[
        /* :: */[
          "O",
          /* :: */[
            "O",
            /* [] */0
          ]
        ],
        /* :: */[
          /* :: */[
            "O",
            /* :: */[
              "O",
              /* :: */[
                "O",
                /* [] */0
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              "O",
              /* :: */[
                "O",
                /* :: */[
                  "O",
                  /* :: */[
                    "O",
                    /* [] */0
                  ]
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                "O",
                /* :: */[
                  "O",
                  /* :: */[
                    "R",
                    /* :: */[
                      "O",
                      /* :: */[
                        "O",
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  "O",
                  /* :: */[
                    "O",
                    /* :: */[
                      "R",
                      /* :: */[
                        "R",
                        /* :: */[
                          "O",
                          /* [] */0
                        ]
                      ]
                    ]
                  ]
                ],
                /* :: */[
                  /* :: */[
                    "O",
                    /* :: */[
                      "O",
                      /* :: */[
                        "O",
                        /* :: */[
                          "B",
                          /* :: */[
                            "B",
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ],
                  /* :: */[
                    /* :: */[
                      "O",
                      /* :: */[
                        "O",
                        /* :: */[
                          "R",
                          /* :: */[
                            "B",
                            /* [] */0
                          ]
                        ]
                      ]
                    ],
                    /* :: */[
                      /* :: */[
                        "O",
                        /* :: */[
                          "O",
                          /* :: */[
                            "R",
                            /* [] */0
                          ]
                        ]
                      ],
                      /* :: */[
                        /* :: */[
                          "O",
                          /* :: */[
                            "O",
                            /* [] */0
                          ]
                        ],
                        /* :: */[
                          /* :: */[
                            "O",
                            /* [] */0
                          ],
                          /* [] */0
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ], "diags1");

CS17SetupGame$Game.checkExpect(nextStateHelper(/* :: */[
          /* :: */[
            "R",
            /* [] */0
          ],
          /* :: */[
            /* :: */[
              "R",
              /* [] */0
            ],
            /* :: */[
              /* [] */0,
              /* :: */[
                /* :: */[
                  "R",
                  /* :: */[
                    "B",
                    /* [] */0
                  ]
                ],
                /* :: */[
                  /* :: */[
                    "R",
                    /* [] */0
                  ],
                  /* :: */[
                    /* :: */[
                      "R",
                      /* [] */0
                    ],
                    /* :: */[
                      /* [] */0,
                      /* [] */0
                    ]
                  ]
                ]
              ]
            ]
          ]
        ], 4, 0, /* P1 */0), /* :: */[
      /* :: */[
        "R",
        /* [] */0
      ],
      /* :: */[
        /* :: */[
          "R",
          /* [] */0
        ],
        /* :: */[
          /* [] */0,
          /* :: */[
            /* :: */[
              "R",
              /* :: */[
                "R",
                /* :: */[
                  "B",
                  /* [] */0
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                "R",
                /* [] */0
              ],
              /* :: */[
                /* :: */[
                  "R",
                  /* [] */0
                ],
                /* :: */[
                  /* [] */0,
                  /* [] */0
                ]
              ]
            ]
          ]
        ]
      ]
    ], "nextStateHelper1");

CS17SetupGame$Game.checkExpect(nextStateHelper(/* :: */[
          /* [] */0,
          /* :: */[
            /* [] */0,
            /* :: */[
              /* [] */0,
              /* :: */[
                /* [] */0,
                /* :: */[
                  /* [] */0,
                  /* :: */[
                    /* [] */0,
                    /* :: */[
                      /* [] */0,
                      /* [] */0
                    ]
                  ]
                ]
              ]
            ]
          ]
        ], 1, 0, /* P2 */1), /* :: */[
      /* :: */[
        "B",
        /* [] */0
      ],
      /* :: */[
        /* [] */0,
        /* :: */[
          /* [] */0,
          /* :: */[
            /* [] */0,
            /* :: */[
              /* [] */0,
              /* :: */[
                /* [] */0,
                /* :: */[
                  /* [] */0,
                  /* [] */0
                ]
              ]
            ]
          ]
        ]
      ]
    ], "nextStateHelper2");

CS17SetupGame$Game.checkExpect(countSequence(/* :: */[
          "R",
          /* :: */[
            "R",
            /* :: */[
              "R",
              /* :: */[
                "B",
                /* :: */[
                  "B",
                  /* :: */[
                    "O",
                    /* :: */[
                      "O",
                      /* [] */0
                    ]
                  ]
                ]
              ]
            ]
          ]
        ], 1), 3, "count1");

CS17SetupGame$Game.checkExpect(countSequence(/* :: */[
          "R",
          /* :: */[
            "R",
            /* :: */[
              "R",
              /* :: */[
                "R",
                /* :: */[
                  "O",
                  /* :: */[
                    "B",
                    /* :: */[
                      "B",
                      /* [] */0
                    ]
                  ]
                ]
              ]
            ]
          ]
        ], 1), 4, "count2");

CS17SetupGame$Game.checkExpect(countSequence(/* :: */[
          "B",
          /* :: */[
            "B",
            /* :: */[
              "B",
              /* :: */[
                "R",
                /* :: */[
                  "R",
                  /* :: */[
                    "R",
                    /* :: */[
                      "R",
                      /* [] */0
                    ]
                  ]
                ]
              ]
            ]
          ]
        ], 1), 4, "count3");

CS17SetupGame$Game.checkExpect(drawHelper(/* :: */[
          /* :: */[
            "R",
            /* [] */0
          ],
          /* :: */[
            /* :: */[
              "R",
              /* :: */[
                "B",
                /* [] */0
              ]
            ],
            /* :: */[
              /* :: */[
                "R",
                /* :: */[
                  "B",
                  /* :: */[
                    "B",
                    /* [] */0
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  "B",
                  /* :: */[
                    "B",
                    /* :: */[
                      "B",
                      /* [] */0
                    ]
                  ]
                ],
                /* :: */[
                  /* [] */0,
                  /* :: */[
                    /* [] */0,
                    /* :: */[
                      /* :: */[
                        "R",
                        /* [] */0
                      ],
                      /* [] */0
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]), 10, "draw1");

CS17SetupGame$Game.checkExpect(drawHelper(/* :: */[
          /* :: */[
            "B",
            /* :: */[
              "B",
              /* :: */[
                "B",
                /* :: */[
                  "R",
                  /* :: */[
                    "R",
                    /* :: */[
                      "R",
                      /* :: */[
                        "R",
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ],
          /* :: */[
            /* :: */[
              "B",
              /* :: */[
                "B",
                /* :: */[
                  "B",
                  /* :: */[
                    "R",
                    /* :: */[
                      "R",
                      /* :: */[
                        "R",
                        /* :: */[
                          "R",
                          /* [] */0
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ],
            /* :: */[
              /* :: */[
                "B",
                /* :: */[
                  "B",
                  /* :: */[
                    "B",
                    /* :: */[
                      "R",
                      /* :: */[
                        "R",
                        /* :: */[
                          "R",
                          /* :: */[
                            "R",
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ]
                ]
              ],
              /* :: */[
                /* :: */[
                  "B",
                  /* :: */[
                    "B",
                    /* :: */[
                      "B",
                      /* :: */[
                        "R",
                        /* :: */[
                          "R",
                          /* :: */[
                            "R",
                            /* :: */[
                              "R",
                              /* [] */0
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]
                ],
                /* :: */[
                  /* :: */[
                    "B",
                    /* :: */[
                      "B",
                      /* :: */[
                        "B",
                        /* :: */[
                          "R",
                          /* :: */[
                            "R",
                            /* :: */[
                              "R",
                              /* :: */[
                                "R",
                                /* [] */0
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ],
                  /* [] */0
                ]
              ]
            ]
          ]
        ]), 35, "draw2");

CS17SetupGame$Game.checkExpect(/* Col */[Caml_format.caml_int_of_string("1")], /* Col */[1], "moveString1");

CS17SetupGame$Game.checkExpect(/* Col */[Caml_format.caml_int_of_string("5")], /* Col */[5], "moveString1");

var MyGame = [
  stringOfPlayer,
  stringOfState,
  stringOfMove,
  initialState,
  legalMoves,
  gameStatus,
  nextState,
  moveOfString,
  estimateValue
];

exports.Connect4 = Connect4;
exports.MyGame = MyGame;
/* initialState Not a pure module */
